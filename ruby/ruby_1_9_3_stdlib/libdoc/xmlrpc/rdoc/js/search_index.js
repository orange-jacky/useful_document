var search_data = {"index":{"searchIndex":["httpserver","request","response","table","nqxml","node","xmlrpc","base64","basicserver","cgiserver","client","proxy","config","convert","create","datetime","faultexception","marshal","marshallable","modrubyserver","parsecontenttype","parserwriterchoosemixin","server","service","basicinterface","interface","publicinstancemethodsinterface","webrickservlet","xmlparser","abstractstreamparser","abstracttreeparser","nqxmlparser","nqxmlstreamparser","xmlrpcparser","nqxmltreeparser","rexmlstreamparser","streamlistener","streamparsermixin","xmlparser","xmlscanstreamparser","xmlscanparser","xmlstreamparser","xmltreeparser","xmlwriter","abstract","simple","xmlparser","==()","[]()","[]()","[]=()","add_handler()","add_introspection()","add_method()","add_multicall()","base64()","boolean()","call()","call2()","call2_async()","call_async()","character()","childnodes()","content_length()","datetime()","day=()","decode()","decoded()","document()","document()","document_to_str()","document_to_str()","double()","dump()","dump_call()","dump_call()","dump_response()","dump_response()","each()","each_installed_parser()","each_installed_writer()","ele()","element()","element()","encode()","encoded()","endelement()","fault()","get_default_handler()","get_instance()","get_methods()","get_methods()","get_service_hook()","get_valid_ip()","haschildnodes()","hour=()","ipimethods()","int()","interface()","load()","load_call()","load_call()","load_response()","load_response()","methodcall()","methodresponse()","method_missing()","method_missing()","method_missing()","min=()","mon=()","month=()","multicall()","multicall2()","multicall2_async()","multicall_async()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new2()","new3()","new_from_hash()","new_from_uri()","nodename()","nodetype()","nodevalue()","on_cdata()","on_chardata()","on_charref()","on_charref_hex()","on_entityref()","on_stag_end()","on_stag_end_empty()","parse()","parse()","parse()","parsemethodcall()","parsemethodcall()","parsemethodresponse()","parsemethodresponse()","parse_content_type()","password=()","pi()","pi()","process()","proxy()","proxy2()","proxy2_async()","proxy_async()","removechild()","require_path_info?()","sec=()","serve()","serve()","serve()","service()","set_default_handler()","set_parser()","set_service_hook()","set_valid_ip()","set_writer()","shutdown()","startelement()","struct()","tag()","text()","text()","timeout=()","to_a()","to_date()","to_h()","to_time()","update()","user=()","writeto()","year=()","readme"],"longSearchIndex":["httpserver","httpserver::request","httpserver::response","httpserver::table","nqxml","nqxml::node","xmlrpc","xmlrpc::base64","xmlrpc::basicserver","xmlrpc::cgiserver","xmlrpc::client","xmlrpc::client::proxy","xmlrpc::config","xmlrpc::convert","xmlrpc::create","xmlrpc::datetime","xmlrpc::faultexception","xmlrpc::marshal","xmlrpc::marshallable","xmlrpc::modrubyserver","xmlrpc::parsecontenttype","xmlrpc::parserwriterchoosemixin","xmlrpc::server","xmlrpc::service","xmlrpc::service::basicinterface","xmlrpc::service::interface","xmlrpc::service::publicinstancemethodsinterface","xmlrpc::webrickservlet","xmlrpc::xmlparser","xmlrpc::xmlparser::abstractstreamparser","xmlrpc::xmlparser::abstracttreeparser","xmlrpc::xmlparser::nqxmlparser","xmlrpc::xmlparser::nqxmlstreamparser","xmlrpc::xmlparser::nqxmlstreamparser::xmlrpcparser","xmlrpc::xmlparser::nqxmltreeparser","xmlrpc::xmlparser::rexmlstreamparser","xmlrpc::xmlparser::rexmlstreamparser::streamlistener","xmlrpc::xmlparser::streamparsermixin","xmlrpc::xmlparser::xmlparser","xmlrpc::xmlparser::xmlscanstreamparser","xmlrpc::xmlparser::xmlscanstreamparser::xmlscanparser","xmlrpc::xmlparser::xmlstreamparser","xmlrpc::xmlparser::xmltreeparser","xmlrpc::xmlwriter","xmlrpc::xmlwriter::abstract","xmlrpc::xmlwriter::simple","xmlrpc::xmlwriter::xmlparser","xmlrpc::datetime#==()","httpserver::table#[]()","nqxml::node#[]()","httpserver::table#[]=()","xmlrpc::basicserver#add_handler()","xmlrpc::basicserver#add_introspection()","xmlrpc::service::basicinterface#add_method()","xmlrpc::basicserver#add_multicall()","xmlrpc::convert::base64()","xmlrpc::convert::boolean()","xmlrpc::client#call()","xmlrpc::client#call2()","xmlrpc::client#call2_async()","xmlrpc::client#call_async()","xmlrpc::xmlparser::streamparsermixin#character()","nqxml::node#childnodes()","httpserver::request#content_length()","xmlrpc::convert::datetime()","xmlrpc::datetime#day=()","xmlrpc::base64::decode()","xmlrpc::base64#decoded()","xmlrpc::xmlwriter::simple#document()","xmlrpc::xmlwriter::xmlparser#document()","xmlrpc::xmlwriter::simple#document_to_str()","xmlrpc::xmlwriter::xmlparser#document_to_str()","xmlrpc::convert::double()","xmlrpc::marshal::dump()","xmlrpc::marshal#dump_call()","xmlrpc::marshal::dump_call()","xmlrpc::marshal::dump_response()","xmlrpc::marshal#dump_response()","httpserver::table#each()","xmlrpc::xmlparser::each_installed_parser()","xmlrpc::xmlwriter::each_installed_writer()","xmlrpc::xmlwriter::abstract#ele()","xmlrpc::xmlwriter::simple#element()","xmlrpc::xmlwriter::xmlparser#element()","xmlrpc::base64::encode()","xmlrpc::base64#encoded()","xmlrpc::xmlparser::streamparsermixin#endelement()","xmlrpc::convert::fault()","xmlrpc::basicserver#get_default_handler()","xmlrpc::webrickservlet#get_instance()","xmlrpc::service::interface#get_methods()","xmlrpc::service::publicinstancemethodsinterface#get_methods()","xmlrpc::basicserver#get_service_hook()","xmlrpc::webrickservlet#get_valid_ip()","nqxml::node#haschildnodes()","xmlrpc::datetime#hour=()","xmlrpc::ipimethods()","xmlrpc::convert::int()","xmlrpc::interface()","xmlrpc::marshal::load()","xmlrpc::marshal::load_call()","xmlrpc::marshal#load_call()","xmlrpc::marshal::load_response()","xmlrpc::marshal#load_response()","xmlrpc::create#methodcall()","xmlrpc::create#methodresponse()","xmlrpc::client::proxy#method_missing()","xmlrpc::xmlparser::rexmlstreamparser::streamlistener#method_missing()","xmlrpc::xmlparser::xmlscanstreamparser::xmlscanparser#method_missing()","xmlrpc::datetime#min=()","xmlrpc::datetime#mon=()","xmlrpc::datetime#month=()","xmlrpc::client#multicall()","xmlrpc::client#multicall2()","xmlrpc::client#multicall2_async()","xmlrpc::client#multicall_async()","httpserver::new()","httpserver::request::new()","httpserver::response::new()","httpserver::table::new()","xmlrpc::base64::new()","xmlrpc::basicserver::new()","xmlrpc::cgiserver::new()","xmlrpc::cgiserver::new()","xmlrpc::client::new()","xmlrpc::client::proxy::new()","xmlrpc::create::new()","xmlrpc::datetime::new()","xmlrpc::faultexception::new()","xmlrpc::marshal::new()","xmlrpc::modrubyserver::new()","xmlrpc::server::new()","xmlrpc::service::basicinterface::new()","xmlrpc::service::interface::new()","xmlrpc::service::publicinstancemethodsinterface::new()","xmlrpc::webrickservlet::new()","xmlrpc::xmlparser::nqxmlstreamparser::new()","xmlrpc::xmlparser::nqxmltreeparser::new()","xmlrpc::xmlparser::nqxmltreeparser::new()","xmlrpc::xmlparser::rexmlstreamparser::new()","xmlrpc::xmlparser::streamparsermixin::new()","xmlrpc::xmlparser::xmlscanstreamparser::new()","xmlrpc::xmlparser::xmlstreamparser::new()","xmlrpc::xmlparser::xmltreeparser::new()","xmlrpc::xmlparser::xmltreeparser::new()","xmlrpc::xmlwriter::xmlparser::new()","xmlrpc::client::new2()","xmlrpc::client::new3()","xmlrpc::client::new_from_hash()","xmlrpc::client::new_from_uri()","nqxml::node#nodename()","nqxml::node#nodetype()","nqxml::node#nodevalue()","xmlrpc::xmlparser::xmlscanstreamparser::xmlscanparser#on_cdata()","xmlrpc::xmlparser::xmlscanstreamparser::xmlscanparser#on_chardata()","xmlrpc::xmlparser::xmlscanstreamparser::xmlscanparser#on_charref()","xmlrpc::xmlparser::xmlscanstreamparser::xmlscanparser#on_charref_hex()","xmlrpc::xmlparser::xmlscanstreamparser::xmlscanparser#on_entityref()","xmlrpc::xmlparser::xmlscanstreamparser::xmlscanparser#on_stag_end()","xmlrpc::xmlparser::xmlscanstreamparser::xmlscanparser#on_stag_end_empty()","xmlrpc::xmlparser::nqxmlstreamparser::xmlrpcparser#parse()","xmlrpc::xmlparser::rexmlstreamparser::streamlistener#parse()","xmlrpc::xmlparser::xmlscanstreamparser::xmlscanparser#parse()","xmlrpc::xmlparser::abstractstreamparser#parsemethodcall()","xmlrpc::xmlparser::abstracttreeparser#parsemethodcall()","xmlrpc::xmlparser::abstractstreamparser#parsemethodresponse()","xmlrpc::xmlparser::abstracttreeparser#parsemethodresponse()","xmlrpc::parsecontenttype#parse_content_type()","xmlrpc::client#password=()","xmlrpc::xmlwriter::simple#pi()","xmlrpc::xmlwriter::xmlparser#pi()","xmlrpc::basicserver#process()","xmlrpc::client#proxy()","xmlrpc::client#proxy2()","xmlrpc::client#proxy2_async()","xmlrpc::client#proxy_async()","nqxml::node#removechild()","xmlrpc::webrickservlet#require_path_info?()","xmlrpc::datetime#sec=()","xmlrpc::cgiserver#serve()","xmlrpc::modrubyserver#serve()","xmlrpc::server#serve()","xmlrpc::webrickservlet#service()","xmlrpc::basicserver#set_default_handler()","xmlrpc::parserwriterchoosemixin#set_parser()","xmlrpc::basicserver#set_service_hook()","xmlrpc::webrickservlet#set_valid_ip()","xmlrpc::parserwriterchoosemixin#set_writer()","xmlrpc::server#shutdown()","xmlrpc::xmlparser::streamparsermixin#startelement()","xmlrpc::convert::struct()","xmlrpc::xmlwriter::abstract#tag()","xmlrpc::xmlwriter::simple#text()","xmlrpc::xmlwriter::xmlparser#text()","xmlrpc::client#timeout=()","xmlrpc::datetime#to_a()","xmlrpc::datetime#to_date()","xmlrpc::faultexception#to_h()","xmlrpc::datetime#to_time()","httpserver::table#update()","xmlrpc::client#user=()","httpserver::table#writeto()","xmlrpc::datetime#year=()",""],"info":[["HttpServer","","HttpServer.html","",""],["HttpServer::Request","","HttpServer/Request.html","","<p>Classes ————————————————-\n"],["HttpServer::Response","","HttpServer/Response.html","",""],["HttpServer::Table","","HttpServer/Table.html","","<p>a case-insensitive Hash class for HTTP header\n"],["NQXML","","NQXML.html","","<p>add some methods to NQXML::Node\n"],["NQXML::Node","","NQXML/Node.html","",""],["XMLRPC","","XMLRPC.html","","<p>xmlrpc/base64.rb\n<p>Copyright (C) 2001, 2002, 2003 by Michael Neumann (mneumann@ntecs.de)\n<p>Released under the …\n"],["XMLRPC::Base64","","XMLRPC/Base64.html","",""],["XMLRPC::BasicServer","","XMLRPC/BasicServer.html","",""],["XMLRPC::CGIServer","","XMLRPC/CGIServer.html","","<p>XMLRPC::CGIServer\n<p>Synopsis\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&quot;xmlrpc/server&quot;</span>\n\n<span class=\"ruby-identifier\">s</span> = <span class=\"ruby-constant\">XMLRPC</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">CGIServer</span>.<span class=\"ruby-identifier\">new</span>\n\n<span class=\"ruby-identifier\">s</span>.<span class=\"ruby-identifier\">add_handler</span>(<span class=\"ruby-string\">&quot;michael.add&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["XMLRPC::Client","","XMLRPC/Client.html","",""],["XMLRPC::Client::Proxy","","XMLRPC/Client/Proxy.html","",""],["XMLRPC::Config","","XMLRPC/Config.html","",""],["XMLRPC::Convert","","XMLRPC/Convert.html","",""],["XMLRPC::Create","","XMLRPC/Create.html","",""],["XMLRPC::DateTime","","XMLRPC/DateTime.html","",""],["XMLRPC::FaultException","","XMLRPC/FaultException.html","",""],["XMLRPC::Marshal","","XMLRPC/Marshal.html","",""],["XMLRPC::Marshallable","","XMLRPC/Marshallable.html","","<p>This module enables a user-class to be marshalled by XML-RPC for Ruby into\na Hash, with one additional …\n"],["XMLRPC::ModRubyServer","","XMLRPC/ModRubyServer.html","","<p>XMLRPC::ModRubyServer\n<p>Description\n<p>Implements a XML-RPC server, which works with Apache mod_ruby.\n"],["XMLRPC::ParseContentType","","XMLRPC/ParseContentType.html","",""],["XMLRPC::ParserWriterChooseMixin","","XMLRPC/ParserWriterChooseMixin.html","",""],["XMLRPC::Server","","XMLRPC/Server.html","",""],["XMLRPC::Service","","XMLRPC/Service.html","",""],["XMLRPC::Service::BasicInterface","","XMLRPC/Service/BasicInterface.html","","<p>base class for Service Interface definitions, used by\nBasicServer#add_handler\n"],["XMLRPC::Service::Interface","","XMLRPC/Service/Interface.html","","<p>class which wraps a Service Interface definition, used by\nBasicServer#add_handler\n"],["XMLRPC::Service::PublicInstanceMethodsInterface","","XMLRPC/Service/PublicInstanceMethodsInterface.html","",""],["XMLRPC::WEBrickServlet","","XMLRPC/WEBrickServlet.html","","<p>XMLRPC::Server\n<p>Synopsis\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&quot;xmlrpc/server&quot;</span>\n\n<span class=\"ruby-identifier\">s</span> = <span class=\"ruby-constant\">XMLRPC</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Server</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">8080</span>)\n\n<span class=\"ruby-identifier\">s</span>.<span class=\"ruby-identifier\">add_handler</span>(<span class=\"ruby-string\">&quot;michael.add&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["XMLRPC::XMLParser","","XMLRPC/XMLParser.html","",""],["XMLRPC::XMLParser::AbstractStreamParser","","XMLRPC/XMLParser/AbstractStreamParser.html","",""],["XMLRPC::XMLParser::AbstractTreeParser","","XMLRPC/XMLParser/AbstractTreeParser.html","",""],["XMLRPC::XMLParser::NQXMLParser","","XMLRPC/XMLParser/NQXMLTreeParser.html","",""],["XMLRPC::XMLParser::NQXMLStreamParser","","XMLRPC/XMLParser/NQXMLStreamParser.html","",""],["XMLRPC::XMLParser::NQXMLStreamParser::XMLRPCParser","","XMLRPC/XMLParser/NQXMLStreamParser/XMLRPCParser.html","",""],["XMLRPC::XMLParser::NQXMLTreeParser","","XMLRPC/XMLParser/NQXMLTreeParser.html","",""],["XMLRPC::XMLParser::REXMLStreamParser","","XMLRPC/XMLParser/REXMLStreamParser.html","",""],["XMLRPC::XMLParser::REXMLStreamParser::StreamListener","","XMLRPC/XMLParser/REXMLStreamParser/StreamListener.html","",""],["XMLRPC::XMLParser::StreamParserMixin","","XMLRPC/XMLParser/StreamParserMixin.html","",""],["XMLRPC::XMLParser::XMLParser","","XMLRPC/XMLParser/XMLTreeParser.html","",""],["XMLRPC::XMLParser::XMLScanStreamParser","","XMLRPC/XMLParser/XMLScanStreamParser.html","",""],["XMLRPC::XMLParser::XMLScanStreamParser::XMLScanParser","","XMLRPC/XMLParser/XMLScanStreamParser/XMLScanParser.html","",""],["XMLRPC::XMLParser::XMLStreamParser","","XMLRPC/XMLParser/XMLStreamParser.html","",""],["XMLRPC::XMLParser::XMLTreeParser","","XMLRPC/XMLParser/XMLTreeParser.html","",""],["XMLRPC::XMLWriter","","XMLRPC/XMLWriter.html","",""],["XMLRPC::XMLWriter::Abstract","","XMLRPC/XMLWriter/Abstract.html","",""],["XMLRPC::XMLWriter::Simple","","XMLRPC/XMLWriter/Simple.html","",""],["XMLRPC::XMLWriter::XMLParser","","XMLRPC/XMLWriter/XMLParser.html","",""],["==","XMLRPC::DateTime","XMLRPC/DateTime.html#method-i-3D-3D","(o)",""],["[]","HttpServer::Table","HttpServer/Table.html#method-i-5B-5D","(key)",""],["[]","NQXML::Node","NQXML/Node.html#method-i-5B-5D","(index)",""],["[]=","HttpServer::Table","HttpServer/Table.html#method-i-5B-5D-3D","(key, value)",""],["add_handler","XMLRPC::BasicServer","XMLRPC/BasicServer.html#method-i-add_handler","(prefix, obj_or_signature=nil, help=nil, &block)",""],["add_introspection","XMLRPC::BasicServer","XMLRPC/BasicServer.html#method-i-add_introspection","()",""],["add_method","XMLRPC::Service::BasicInterface","XMLRPC/Service/BasicInterface.html#method-i-add_method","(sig, help=nil, meth_name=nil)",""],["add_multicall","XMLRPC::BasicServer","XMLRPC/BasicServer.html#method-i-add_multicall","()",""],["base64","XMLRPC::Convert","XMLRPC/Convert.html#method-c-base64","(str)",""],["boolean","XMLRPC::Convert","XMLRPC/Convert.html#method-c-boolean","(str)",""],["call","XMLRPC::Client","XMLRPC/Client.html#method-i-call","(method, *args)","<p>Call methods ————————————————————–\n"],["call2","XMLRPC::Client","XMLRPC/Client.html#method-i-call2","(method, *args)",""],["call2_async","XMLRPC::Client","XMLRPC/Client.html#method-i-call2_async","(method, *args)",""],["call_async","XMLRPC::Client","XMLRPC/Client.html#method-i-call_async","(method, *args)",""],["character","XMLRPC::XMLParser::StreamParserMixin","XMLRPC/XMLParser/StreamParserMixin.html#method-i-character","(data)",""],["childNodes","NQXML::Node","NQXML/Node.html#method-i-childNodes","()",""],["content_length","HttpServer::Request","HttpServer/Request.html#method-i-content_length","()",""],["dateTime","XMLRPC::Convert","XMLRPC/Convert.html#method-c-dateTime","(str)",""],["day=","XMLRPC::DateTime","XMLRPC/DateTime.html#method-i-day-3D","(value)",""],["decode","XMLRPC::Base64","XMLRPC/Base64.html#method-c-decode","(str)",""],["decoded","XMLRPC::Base64","XMLRPC/Base64.html#method-i-decoded","()",""],["document","XMLRPC::XMLWriter::Simple","XMLRPC/XMLWriter/Simple.html#method-i-document","(*params)",""],["document","XMLRPC::XMLWriter::XMLParser","XMLRPC/XMLWriter/XMLParser.html#method-i-document","(*params)",""],["document_to_str","XMLRPC::XMLWriter::Simple","XMLRPC/XMLWriter/Simple.html#method-i-document_to_str","(doc)",""],["document_to_str","XMLRPC::XMLWriter::XMLParser","XMLRPC/XMLWriter/XMLParser.html#method-i-document_to_str","(doc)",""],["double","XMLRPC::Convert","XMLRPC/Convert.html#method-c-double","(str)",""],["dump","XMLRPC::Marshal","XMLRPC/Marshal.html#method-c-dump","( param )",""],["dump_call","XMLRPC::Marshal","XMLRPC/Marshal.html#method-i-dump_call","( methodName, *params )",""],["dump_call","XMLRPC::Marshal","XMLRPC/Marshal.html#method-c-dump_call","( methodName, *params )",""],["dump_response","XMLRPC::Marshal","XMLRPC/Marshal.html#method-c-dump_response","( param )",""],["dump_response","XMLRPC::Marshal","XMLRPC/Marshal.html#method-i-dump_response","( param )",""],["each","HttpServer::Table","HttpServer/Table.html#method-i-each","()",""],["each_installed_parser","XMLRPC::XMLParser","XMLRPC/XMLParser.html#method-c-each_installed_parser","()","<p>yields an instance of each installed parser\n"],["each_installed_writer","XMLRPC::XMLWriter","XMLRPC/XMLWriter.html#method-c-each_installed_writer","()","<p>yields an instance of each installed XML writer\n"],["ele","XMLRPC::XMLWriter::Abstract","XMLRPC/XMLWriter/Abstract.html#method-i-ele","(name, *children)",""],["element","XMLRPC::XMLWriter::Simple","XMLRPC/XMLWriter/Simple.html#method-i-element","(name, attrs, *children)",""],["element","XMLRPC::XMLWriter::XMLParser","XMLRPC/XMLWriter/XMLParser.html#method-i-element","(name, attrs, *children)",""],["encode","XMLRPC::Base64","XMLRPC/Base64.html#method-c-encode","(str)",""],["encoded","XMLRPC::Base64","XMLRPC/Base64.html#method-i-encoded","()",""],["endElement","XMLRPC::XMLParser::StreamParserMixin","XMLRPC/XMLParser/StreamParserMixin.html#method-i-endElement","(name)",""],["fault","XMLRPC::Convert","XMLRPC/Convert.html#method-c-fault","(hash)",""],["get_default_handler","XMLRPC::BasicServer","XMLRPC/BasicServer.html#method-i-get_default_handler","()",""],["get_instance","XMLRPC::WEBrickServlet","XMLRPC/WEBrickServlet.html#method-i-get_instance","(config, *options)",""],["get_methods","XMLRPC::Service::Interface","XMLRPC/Service/Interface.html#method-i-get_methods","(obj, delim=\".\")",""],["get_methods","XMLRPC::Service::PublicInstanceMethodsInterface","XMLRPC/Service/PublicInstanceMethodsInterface.html#method-i-get_methods","(obj, delim=\".\")",""],["get_service_hook","XMLRPC::BasicServer","XMLRPC/BasicServer.html#method-i-get_service_hook","()",""],["get_valid_ip","XMLRPC::WEBrickServlet","XMLRPC/WEBrickServlet.html#method-i-get_valid_ip","()",""],["hasChildNodes","NQXML::Node","NQXML/Node.html#method-i-hasChildNodes","()",""],["hour=","XMLRPC::DateTime","XMLRPC/DateTime.html#method-i-hour-3D","(value)",""],["iPIMethods","XMLRPC","XMLRPC.html#method-c-iPIMethods","(prefix)","<p>short-cut for creating a PublicInstanceMethodsInterface\n"],["int","XMLRPC::Convert","XMLRPC/Convert.html#method-c-int","(str)",""],["interface","XMLRPC","XMLRPC.html#method-c-interface","(prefix, &p)","<p>short-form to create a Service::Interface\n"],["load","XMLRPC::Marshal","XMLRPC/Marshal.html#method-c-load","( stringOrReadable )",""],["load_call","XMLRPC::Marshal","XMLRPC/Marshal.html#method-c-load_call","( stringOrReadable )",""],["load_call","XMLRPC::Marshal","XMLRPC/Marshal.html#method-i-load_call","( stringOrReadable )","<p>returns [ methodname, params ]\n"],["load_response","XMLRPC::Marshal","XMLRPC/Marshal.html#method-c-load_response","( stringOrReadable )",""],["load_response","XMLRPC::Marshal","XMLRPC/Marshal.html#method-i-load_response","( stringOrReadable )","<p>returns paramOrFault\n"],["methodCall","XMLRPC::Create","XMLRPC/Create.html#method-i-methodCall","(name, *params)",""],["methodResponse","XMLRPC::Create","XMLRPC/Create.html#method-i-methodResponse","(is_ret, *params)","<p>generates a XML-RPC methodResponse document\n<p>if is_ret == false then the params array must contain only …\n"],["method_missing","XMLRPC::Client::Proxy","XMLRPC/Client/Proxy.html#method-i-method_missing","(mid, *args)",""],["method_missing","XMLRPC::XMLParser::REXMLStreamParser::StreamListener","XMLRPC/XMLParser/REXMLStreamParser/StreamListener.html#method-i-method_missing","(*a)",""],["method_missing","XMLRPC::XMLParser::XMLScanStreamParser::XMLScanParser","XMLRPC/XMLParser/XMLScanStreamParser/XMLScanParser.html#method-i-method_missing","(*a)",""],["min=","XMLRPC::DateTime","XMLRPC/DateTime.html#method-i-min-3D","(value)",""],["mon=","XMLRPC::DateTime","XMLRPC/DateTime.html#method-i-mon-3D","(value)",""],["month=","XMLRPC::DateTime","XMLRPC/DateTime.html#method-i-month-3D","(value)",""],["multicall","XMLRPC::Client","XMLRPC/Client.html#method-i-multicall","(*methods)","<p>Multicall methods ————————————————————–\n"],["multicall2","XMLRPC::Client","XMLRPC/Client.html#method-i-multicall2","(*methods)",""],["multicall2_async","XMLRPC::Client","XMLRPC/Client.html#method-i-multicall2_async","(*methods)",""],["multicall_async","XMLRPC::Client","XMLRPC/Client.html#method-i-multicall_async","(*methods)",""],["new","HttpServer","HttpServer.html#method-c-new","(handle_obj, port = 8080, host = DEFAULT_HOST, maxConnections = 4, stdlog = $stdout, audit = true, debug = true)","<p>handle_obj specifies the object, that receives calls to request_handler and\nip_auth_handler\n"],["new","HttpServer::Request","HttpServer/Request.html#method-c-new","(data, method=nil, path=nil, proto=nil)",""],["new","HttpServer::Response","HttpServer/Response.html#method-c-new","(status=200)",""],["new","HttpServer::Table","HttpServer/Table.html#method-c-new","(hash={})",""],["new","XMLRPC::Base64","XMLRPC/Base64.html#method-c-new","(str, state = :dec)",""],["new","XMLRPC::BasicServer","XMLRPC/BasicServer.html#method-c-new","(class_delim=\".\")",""],["new","XMLRPC::CGIServer","XMLRPC/CGIServer.html#method-c-new","(*a)",""],["new","XMLRPC::CGIServer","XMLRPC/CGIServer.html#method-c-new","(*a)",""],["new","XMLRPC::Client","XMLRPC/Client.html#method-c-new","(host=nil, path=nil, port=nil, proxy_host=nil, proxy_port=nil, user=nil, password=nil, use_ssl=nil, timeout=nil)","<p>Constructors ——————————————————————-\n"],["new","XMLRPC::Client::Proxy","XMLRPC/Client/Proxy.html#method-c-new","(server, prefix, args=[], meth=:call, delim=\".\")",""],["new","XMLRPC::Create","XMLRPC/Create.html#method-c-new","(xml_writer = nil)",""],["new","XMLRPC::DateTime","XMLRPC/DateTime.html#method-c-new","(year, month, day, hour, min, sec)",""],["new","XMLRPC::FaultException","XMLRPC/FaultException.html#method-c-new","(faultCode, faultString)",""],["new","XMLRPC::Marshal","XMLRPC/Marshal.html#method-c-new","( parser = nil, writer = nil )","<p>instance methods —————————-\n"],["new","XMLRPC::ModRubyServer","XMLRPC/ModRubyServer.html#method-c-new","(*a)",""],["new","XMLRPC::Server","XMLRPC/Server.html#method-c-new","(port=8080, host=\"127.0.0.1\", maxConnections=4, stdlog=$stdout, audit=true, debug=true, *a)",""],["new","XMLRPC::Service::BasicInterface","XMLRPC/Service/BasicInterface.html#method-c-new","(prefix)",""],["new","XMLRPC::Service::Interface","XMLRPC/Service/Interface.html#method-c-new","(prefix, &p)",""],["new","XMLRPC::Service::PublicInstanceMethodsInterface","XMLRPC/Service/PublicInstanceMethodsInterface.html#method-c-new","(prefix)",""],["new","XMLRPC::WEBrickServlet","XMLRPC/WEBrickServlet.html#method-c-new","(*a)",""],["new","XMLRPC::XMLParser::NQXMLStreamParser","XMLRPC/XMLParser/NQXMLStreamParser.html#method-c-new","()",""],["new","XMLRPC::XMLParser::NQXMLTreeParser","XMLRPC/XMLParser/NQXMLTreeParser.html#method-c-new","()",""],["new","XMLRPC::XMLParser::NQXMLTreeParser","XMLRPC/XMLParser/NQXMLTreeParser.html#method-c-new","()",""],["new","XMLRPC::XMLParser::REXMLStreamParser","XMLRPC/XMLParser/REXMLStreamParser.html#method-c-new","()",""],["new","XMLRPC::XMLParser::StreamParserMixin","XMLRPC/XMLParser/StreamParserMixin.html#method-c-new","(*a)",""],["new","XMLRPC::XMLParser::XMLScanStreamParser","XMLRPC/XMLParser/XMLScanStreamParser.html#method-c-new","()",""],["new","XMLRPC::XMLParser::XMLStreamParser","XMLRPC/XMLParser/XMLStreamParser.html#method-c-new","()",""],["new","XMLRPC::XMLParser::XMLTreeParser","XMLRPC/XMLParser/XMLTreeParser.html#method-c-new","()",""],["new","XMLRPC::XMLParser::XMLTreeParser","XMLRPC/XMLParser/XMLTreeParser.html#method-c-new","()",""],["new","XMLRPC::XMLWriter::XMLParser","XMLRPC/XMLWriter/XMLParser.html#method-c-new","()",""],["new2","XMLRPC::Client","XMLRPC/Client.html#method-c-new2","(uri, proxy=nil, timeout=nil)",""],["new3","XMLRPC::Client","XMLRPC/Client.html#method-c-new3","(hash={})",""],["new_from_hash","XMLRPC::Client","XMLRPC/Client.html#method-c-new_from_hash","(hash={})",""],["new_from_uri","XMLRPC::Client","XMLRPC/Client.html#method-c-new_from_uri","(uri, proxy=nil, timeout=nil)",""],["nodeName","NQXML::Node","NQXML/Node.html#method-i-nodeName","()",""],["nodeType","NQXML::Node","NQXML/Node.html#method-i-nodeType","()",""],["nodeValue","NQXML::Node","NQXML/Node.html#method-i-nodeValue","()",""],["on_cdata","XMLRPC::XMLParser::XMLScanStreamParser::XMLScanParser","XMLRPC/XMLParser/XMLScanStreamParser/XMLScanParser.html#method-i-on_cdata","(str)",""],["on_chardata","XMLRPC::XMLParser::XMLScanStreamParser::XMLScanParser","XMLRPC/XMLParser/XMLScanStreamParser/XMLScanParser.html#method-i-on_chardata","(str)",""],["on_charref","XMLRPC::XMLParser::XMLScanStreamParser::XMLScanParser","XMLRPC/XMLParser/XMLScanStreamParser/XMLScanParser.html#method-i-on_charref","(code)",""],["on_charref_hex","XMLRPC::XMLParser::XMLScanStreamParser::XMLScanParser","XMLRPC/XMLParser/XMLScanStreamParser/XMLScanParser.html#method-i-on_charref_hex","(code)",""],["on_entityref","XMLRPC::XMLParser::XMLScanStreamParser::XMLScanParser","XMLRPC/XMLParser/XMLScanStreamParser/XMLScanParser.html#method-i-on_entityref","(ent)",""],["on_stag_end","XMLRPC::XMLParser::XMLScanStreamParser::XMLScanParser","XMLRPC/XMLParser/XMLScanStreamParser/XMLScanParser.html#method-i-on_stag_end","(name)",""],["on_stag_end_empty","XMLRPC::XMLParser::XMLScanStreamParser::XMLScanParser","XMLRPC/XMLParser/XMLScanStreamParser/XMLScanParser.html#method-i-on_stag_end_empty","(name)",""],["parse","XMLRPC::XMLParser::NQXMLStreamParser::XMLRPCParser","XMLRPC/XMLParser/NQXMLStreamParser/XMLRPCParser.html#method-i-parse","(str)",""],["parse","XMLRPC::XMLParser::REXMLStreamParser::StreamListener","XMLRPC/XMLParser/REXMLStreamParser/StreamListener.html#method-i-parse","(str)",""],["parse","XMLRPC::XMLParser::XMLScanStreamParser::XMLScanParser","XMLRPC/XMLParser/XMLScanStreamParser/XMLScanParser.html#method-i-parse","(str)",""],["parseMethodCall","XMLRPC::XMLParser::AbstractStreamParser","XMLRPC/XMLParser/AbstractStreamParser.html#method-i-parseMethodCall","(str)",""],["parseMethodCall","XMLRPC::XMLParser::AbstractTreeParser","XMLRPC/XMLParser/AbstractTreeParser.html#method-i-parseMethodCall","(str)",""],["parseMethodResponse","XMLRPC::XMLParser::AbstractStreamParser","XMLRPC/XMLParser/AbstractStreamParser.html#method-i-parseMethodResponse","(str)",""],["parseMethodResponse","XMLRPC::XMLParser::AbstractTreeParser","XMLRPC/XMLParser/AbstractTreeParser.html#method-i-parseMethodResponse","(str)",""],["parse_content_type","XMLRPC::ParseContentType","XMLRPC/ParseContentType.html#method-i-parse_content_type","(str)",""],["password=","XMLRPC::Client","XMLRPC/Client.html#method-i-password-3D","(new_password)",""],["pi","XMLRPC::XMLWriter::Simple","XMLRPC/XMLWriter/Simple.html#method-i-pi","(name, *params)",""],["pi","XMLRPC::XMLWriter::XMLParser","XMLRPC/XMLWriter/XMLParser.html#method-i-pi","(name, *params)",""],["process","XMLRPC::BasicServer","XMLRPC/BasicServer.html#method-i-process","(data)",""],["proxy","XMLRPC::Client","XMLRPC/Client.html#method-i-proxy","(prefix=nil, *args)","<p>Proxy generating methods ——————————————\n"],["proxy2","XMLRPC::Client","XMLRPC/Client.html#method-i-proxy2","(prefix=nil, *args)",""],["proxy2_async","XMLRPC::Client","XMLRPC/Client.html#method-i-proxy2_async","(prefix=nil, *args)",""],["proxy_async","XMLRPC::Client","XMLRPC/Client.html#method-i-proxy_async","(prefix=nil, *args)",""],["removeChild","NQXML::Node","NQXML/Node.html#method-i-removeChild","(node)",""],["require_path_info?","XMLRPC::WEBrickServlet","XMLRPC/WEBrickServlet.html#method-i-require_path_info-3F","()","<p>deprecated from WEBrick/1.2.2. but does not break anything.\n"],["sec=","XMLRPC::DateTime","XMLRPC/DateTime.html#method-i-sec-3D","(value)",""],["serve","XMLRPC::CGIServer","XMLRPC/CGIServer.html#method-i-serve","()",""],["serve","XMLRPC::ModRubyServer","XMLRPC/ModRubyServer.html#method-i-serve","()",""],["serve","XMLRPC::Server","XMLRPC/Server.html#method-i-serve","()",""],["service","XMLRPC::WEBrickServlet","XMLRPC/WEBrickServlet.html#method-i-service","(request, response)",""],["set_default_handler","XMLRPC::BasicServer","XMLRPC/BasicServer.html#method-i-set_default_handler","(&handler)",""],["set_parser","XMLRPC::ParserWriterChooseMixin","XMLRPC/ParserWriterChooseMixin.html#method-i-set_parser","(parser)",""],["set_service_hook","XMLRPC::BasicServer","XMLRPC/BasicServer.html#method-i-set_service_hook","(&handler)",""],["set_valid_ip","XMLRPC::WEBrickServlet","XMLRPC/WEBrickServlet.html#method-i-set_valid_ip","(*ip_addr)",""],["set_writer","XMLRPC::ParserWriterChooseMixin","XMLRPC/ParserWriterChooseMixin.html#method-i-set_writer","(writer)",""],["shutdown","XMLRPC::Server","XMLRPC/Server.html#method-i-shutdown","()",""],["startElement","XMLRPC::XMLParser::StreamParserMixin","XMLRPC/XMLParser/StreamParserMixin.html#method-i-startElement","(name, attrs=[])",""],["struct","XMLRPC::Convert","XMLRPC/Convert.html#method-c-struct","(hash)",""],["tag","XMLRPC::XMLWriter::Abstract","XMLRPC/XMLWriter/Abstract.html#method-i-tag","(name, txt)",""],["text","XMLRPC::XMLWriter::Simple","XMLRPC/XMLWriter/Simple.html#method-i-text","(txt)",""],["text","XMLRPC::XMLWriter::XMLParser","XMLRPC/XMLWriter/XMLParser.html#method-i-text","(txt)",""],["timeout=","XMLRPC::Client","XMLRPC/Client.html#method-i-timeout-3D","(new_timeout)",""],["to_a","XMLRPC::DateTime","XMLRPC/DateTime.html#method-i-to_a","()",""],["to_date","XMLRPC::DateTime","XMLRPC/DateTime.html#method-i-to_date","()",""],["to_h","XMLRPC::FaultException","XMLRPC/FaultException.html#method-i-to_h","()","<p>returns a hash\n"],["to_time","XMLRPC::DateTime","XMLRPC/DateTime.html#method-i-to_time","()",""],["update","HttpServer::Table","HttpServer/Table.html#method-i-update","(hash)",""],["user=","XMLRPC::Client","XMLRPC/Client.html#method-i-user-3D","(new_user)",""],["writeTo","HttpServer::Table","HttpServer/Table.html#method-i-writeTo","(port)",""],["year=","XMLRPC::DateTime","XMLRPC/DateTime.html#method-i-year-3D","(value)",""],["README","","xmlrpc/README_txt.html","","<p>XMLRPC for Ruby, Standard Library Documentation\n<p>Overview\n<p>XMLRPC is a lightweight protocol that enables …\n"]]}}